version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    networks:
      - kafka-network
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok"]
      interval: 10s
      timeout: 10s
      retries: 5
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    networks:
      - kafka-network
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9093:9093"  # Additional port for external access
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
      interval: 10s
      timeout: 10s
      retries: 5
  github_webhook_listener_and_topic_emitter:
    build: ./Github_Webhook_Listener_and_Topic_Emitter
    container_name: github_webhook_listener_and_topic_emitter
    depends_on:
      - kafka
    environment:
      KAFKA_SERVER: "${KAFKA_BOOTSTRAP_SERVERS}"
      KAFKA_TOPIC: "${TOPIC_NAME}"
      GITHUB_ACCESS_TOKEN: "${GITHUB_ACCESS_TOKEN}"
      REPO_NAME: "${REPO_NAME}"
      CALLBACK_URL: "${CALLBACK_URL}"
      HOST:  "0.0.0.0"
      PORT: 8001
    ports:
      - "8001:8001"
    networks:
      - kafka-network
    volumes:
      - ./github-webhook-listener/app:/app
  commit_data_processor:
    build: ./CommitDataProcessor
    container_name: commit_data_processor
    depends_on:
      - kafka
    environment:
      KAFKA_SERVER: "kafka:9092"
      KAFKA_TOPIC: "${TOPIC_NAME}"
      MODEL_PROVIDER: "${MODEL_PROVIDER}"
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      VECTORDB_TOPIC_NAME: "${VECTORDB_TOPIC_NAME}"
      HOST: "0.0.0.0"
      TEMPLATE: "${TEMPLATE}"
      PORT: 8002
    ports:
      - "8002:8002"
    networks:
      - kafka-network
    volumes:
      - ./CommitDataProcessor/app:/app
  vector_db_ingestor:
    build: ./VectorDbIngestor
    container_name: vector_db_ingestor
    depends_on:
      - kafka
      - qdrant
    environment:
      KAFKA_SERVER: "kafka:9092"
      VECTORDB_TOPIC_NAME: "${VECTORDB_TOPIC_NAME}"
      VECTOR_DB_HOST: "qdrant"
      VECTOR_DB_PORT: 6333
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      HOST: "0.0.0.0"
      PORT: 8003
    ports:
      - "8003:8003"
    networks:
      - kafka-network
    volumes:
      - ./VectorDbIngestor/app:/app
  qdrant:
    image: qdrant/qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-storage:/qdrant/storage:z
    networks:
      - kafka-network
networks:
  kafka-network:
    driver: bridge
volumes:
  zookeeper-data:
    driver: local
  kafka-data:
    driver: local
  qdrant-storage:
    driver: local
  github-webhook-listener:
    driver: local
  CommitDataProcessor:
    driver: local
  VectorDbIngestor:
    driver: local
